{"uid":"e3d4fb92c24d1021","name":"ValidationOfResults","historyId":"GalileoE1DllPllVemlTrackingInternalTest:GalileoE1DllPllVemlTrackingInternalTest#ValidationOfResults","time":{"start":1734688546438,"stop":1734688546438,"duration":0},"status":"failed","statusMessage":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","statusTrace":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"GalileoE1DllPllVemlTrackingInternalTest"},{"name":"testClass","value":"GalileoE1DllPllVemlTrackingInternalTest"},{"name":"package","value":"GalileoE1DllPllVemlTrackingInternalTest"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f044ea53c535c187","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734687850534,"stop":1734687850534,"duration":0}},{"uid":"8557ba2577ff0415","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-test/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734449976537,"stop":1734449976537,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":20},"items":[{"uid":"79bb30b2612ef87d","reportUrl":"https://xguerreropau.github.io/gnss-sdr/16//#testresult/79bb30b2612ef87d","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"f98bf1e3fd9dce94","reportUrl":"https://xguerreropau.github.io/gnss-sdr/15//#testresult/f98bf1e3fd9dce94","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"1a0949ae4afaa4fa","reportUrl":"https://xguerreropau.github.io/gnss-sdr/14//#testresult/1a0949ae4afaa4fa","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"d910edbbe8a99aea","reportUrl":"https://xguerreropau.github.io/gnss-sdr/13//#testresult/d910edbbe8a99aea","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"33cfb6379577c9b6","reportUrl":"https://xguerreropau.github.io/gnss-sdr/12//#testresult/33cfb6379577c9b6","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"edbaf8f0cd69b914","reportUrl":"https://xguerreropau.github.io/gnss-sdr/11//#testresult/edbaf8f0cd69b914","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"f5070152f25ea428","reportUrl":"https://xguerreropau.github.io/gnss-sdr/10//#testresult/f5070152f25ea428","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"8b63690a40aea514","reportUrl":"https://xguerreropau.github.io/gnss-sdr/9//#testresult/8b63690a40aea514","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"2e77b0e899f01c33","reportUrl":"https://xguerreropau.github.io/gnss-sdr/8//#testresult/2e77b0e899f01c33","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"d6bfc9899f999342","reportUrl":"https://xguerreropau.github.io/gnss-sdr/7//#testresult/d6bfc9899f999342","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"3b68b264e7f578b4","reportUrl":"https://xguerreropau.github.io/gnss-sdr/6//#testresult/3b68b264e7f578b4","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"5f8d2aa024bc479","reportUrl":"https://xguerreropau.github.io/gnss-sdr/3//#testresult/5f8d2aa024bc479","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"51c9a57f42fd7f9c","reportUrl":"https://xguerreropau.github.io/gnss-sdr/2//#testresult/51c9a57f42fd7f9c","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"7f3028115ad1302","reportUrl":"https://xguerreropau.github.io/gnss-sdr/1//#testresult/7f3028115ad1302","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"366bbee3e778795f","reportUrl":"https://xguerreropau.github.io/gnss-sdr/32//#testresult/366bbee3e778795f","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734688546438,"stop":1734688546438,"duration":0}},{"uid":"31d432c57fdf4ab4","reportUrl":"https://xguerreropau.github.io/gnss-sdr/31//#testresult/31d432c57fdf4ab4","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-test/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734449976537,"stop":1734449976537,"duration":0}},{"uid":"166f590edaada6c1","reportUrl":"https://xguerreropau.github.io/gnss-sdr/30//#testresult/166f590edaada6c1","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-test/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734449976537,"stop":1734449976537,"duration":0}},{"uid":"30c2cefe87abb6","reportUrl":"https://xguerreropau.github.io/gnss-sdr/29//#testresult/30c2cefe87abb6","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-test/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734449976537,"stop":1734449976537,"duration":0}},{"uid":"f294b0f2a8774f9","reportUrl":"https://xguerreropau.github.io/gnss-sdr/28//#testresult/f294b0f2a8774f9","status":"failed","statusDetails":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-test/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","time":{"start":1734449976537,"stop":1734449976537,"duration":0}}]},"tags":[]},"source":"e3d4fb92c24d1021.json","parameterValues":[]}