{"uid":"4b4757e66a1912dae1a509f688f20b0f","children":[{"name":"Product defects","children":[{"name":"/home/xavier/gnss-sdr/tests/unit-tests/control-plane/control_thread_test.cc:240\nValue of: fs::exists(file)\n  Actual: false\nExpected: true\n","children":[{"name":"StopReceiverProgrammatically","uid":"daa554601862c60c","parentUid":"52fe01194cd1a78b2036d12ab28ca64e","status":"failed","time":{"start":1734688545532,"stop":1734688545532,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"52fe01194cd1a78b2036d12ab28ca64e"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/control-plane/control_thread_test.cc:115\nValue of: fs::exists(file)\n  Actual: false\nExpected: true\n","children":[{"name":"InstantiateRunControlMessages","uid":"6a4a2ca7573ce140","parentUid":"81af3bdccd351d28fbff6d6faf47accc","status":"failed","time":{"start":1734688545532,"stop":1734688545532,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"81af3bdccd351d28fbff6d6faf47accc"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/control-plane/control_thread_test.cc:176\nValue of: fs::exists(file)\n  Actual: false\nExpected: true\n","children":[{"name":"InstantiateRunControlMessages2","uid":"bcc156fe5c54ca18","parentUid":"788c7a362e02252b7294b0a6c909d132","status":"failed","time":{"start":1734688545532,"stop":1734688545532,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"788c7a362e02252b7294b0a6c909d132"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/control-plane/gnss_flowgraph_test.cc:96\nValue of: flowgraph->connected()\n  Actual: false\nExpected: true\n","children":[{"name":"InstantiateConnectStartStop","uid":"2556c34091d2ba90","parentUid":"659a0e4a7d8b63a505c8d32c3a48a78d","status":"failed","time":{"start":1734688545564,"stop":1734688545650,"duration":86},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"659a0e4a7d8b63a505c8d32c3a48a78d"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/control-plane/gnss_flowgraph_test.cc:130\nValue of: flowgraph->connected()\n  Actual: false\nExpected: true\n","children":[{"name":"InstantiateConnectStartStopGalileoE1B","uid":"4107859e6df5a1aa","parentUid":"c7a4c452b494bdada2ad9da1b61d670d","status":"failed","time":{"start":1734688545564,"stop":1734688545799,"duration":235},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"c7a4c452b494bdada2ad9da1b61d670d"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/control-plane/gnss_flowgraph_test.cc:61\nValue of: flowgraph->connected()\n  Actual: false\nExpected: true\n","children":[{"name":"InstantiateConnectStartStopOldNotation","uid":"d6d066c52192f546","parentUid":"027206ac926dd6d174c1d04e720124e4","status":"failed","time":{"start":1734688545564,"stop":1734688545570,"duration":6},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"027206ac926dd6d174c1d04e720124e4"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/control-plane/gnss_flowgraph_test.cc:246\nValue of: flowgraph->connected()\n  Actual: false\nExpected: true\n","children":[{"name":"InstantiateConnectStartStopHybrid","uid":"ba97ad247ece8d01","parentUid":"e60d7c03e2058b1295c1664f8a24b6d3","status":"failed","time":{"start":1734688545564,"stop":1734688545790,"duration":226},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"e60d7c03e2058b1295c1664f8a24b6d3"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/acquisition/galileo_e1_pcps_ambiguous_acquisition_gsoc_test.cc:290\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/Galileo_E1_ID_1_Fs_4Msps_8ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); top_block->connect(file_source, 0, acquisition->get_left_block(), 0); top_block->msg_connect(acquisition->get_right_block(), pmt::mp(\"events\"), msg_rx, pmt::mp(\"events\")); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of acquisition test.\n","children":[{"name":"ValidationOfResults","uid":"41c9c68362f9e6a6","parentUid":"24e619f4452d67991706c3f7c062de26","status":"failed","time":{"start":1734688546120,"stop":1734688546124,"duration":4},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":2,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"24e619f4452d67991706c3f7c062de26"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/acquisition/galileo_e1_pcps_ambiguous_acquisition_test.cc:351\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/Galileo_E1_ID_1_Fs_4Msps_8ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); top_block->connect(file_source, 0, acquisition->get_left_block(), 0); top_block->msg_connect(acquisition->get_right_block(), pmt::mp(\"events\"), msg_rx, pmt::mp(\"events\")); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of acquisition test.\n","children":[{"name":"ValidationOfResults","uid":"726777d5f4ddab7a","parentUid":"fc1e531fab5d5585a6dc50f8e25e5fa7","status":"failed","time":{"start":1734688546199,"stop":1734688546203,"duration":4},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":2,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"fc1e531fab5d5585a6dc50f8e25e5fa7"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/acquisition/gps_l1_ca_pcps_acquisition_test.cc:348\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GPS_L1_CA_ID_1_Fs_4Msps_2ms.dat\"; const char *file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); top_block->connect(file_source, 0, acquisition->get_left_block(), 0); top_block->msg_connect(acquisition->get_right_block(), pmt::mp(\"events\"), msg_rx, pmt::mp(\"events\")); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of acquisition test.\n","children":[{"name":"ValidationOfResults","uid":"fa7da038ca151062","parentUid":"cb56dfee75e548e1060548c7278517b5","status":"failed","time":{"start":1734688546300,"stop":1734688546303,"duration":3},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"cb56dfee75e548e1060548c7278517b5"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/filter/fir_filter_test.cc:242\nExpected: { filter->connect(top_block); auto source = std::make_shared<FileSignalSource>(config2.get(), \"Test_Source\", 0, 1, queue.get()); source->connect(top_block); auto null_sink = gr::blocks::null_sink::make(item_size); top_block->connect(source->get_right_block(), 0, filter->get_left_block(), 0); top_block->connect(filter->get_right_block(), 0, null_sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the top_block.\n","children":[{"name":"ConnectAndRunGrcomplex","uid":"5082423390795b4c","parentUid":"3b2546493a4b3a22cda5b5af51fcab3c","status":"failed","time":{"start":1734688546312,"stop":1734688546312,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3b2546493a4b3a22cda5b5af51fcab3c"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/filter/fir_filter_test.cc:375\nExpected: { filter->connect(top_block); auto source = std::make_shared<FileSignalSource>(config2.get(), \"Test_Source\", 0, 1, queue.get()); source->connect(top_block); interleaved_byte_to_complex_byte_sptr ibyte_to_cbyte_ = make_interleaved_byte_to_complex_byte(); auto null_sink = gr::blocks::null_sink::make(item_size); top_block->connect(source->get_right_block(), 0, ibyte_to_cbyte_, 0); top_block->connect(ibyte_to_cbyte_, 0, filter->get_left_block(), 0); top_block->connect(filter->get_right_block(), 0, null_sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the top_block.\n","children":[{"name":"ConnectAndRunCbyteGrcomplex","uid":"23aadae54815baf2","parentUid":"179b3f5e25bf0d200e10393bb7dce958","status":"failed","time":{"start":1734688546312,"stop":1734688546312,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"179b3f5e25bf0d200e10393bb7dce958"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/filter/fir_filter_test.cc:285\nExpected: { filter->connect(top_block); auto source = std::make_shared<FileSignalSource>(config2.get(), \"Test_Source\", 0, 1, queue.get()); source->connect(top_block); interleaved_short_to_complex_short_sptr ishort_to_cshort_ = make_interleaved_short_to_complex_short(); auto null_sink = gr::blocks::null_sink::make(item_size); top_block->connect(source->get_right_block(), 0, ishort_to_cshort_, 0); top_block->connect(ishort_to_cshort_, 0, filter->get_left_block(), 0); top_block->connect(filter->get_right_block(), 0, null_sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the top_block.\n","children":[{"name":"ConnectAndRunCshorts","uid":"714a7fbec50fbf78","parentUid":"1b4b6d93398029a817ac07e6cce43391","status":"failed","time":{"start":1734688546312,"stop":1734688546312,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"1b4b6d93398029a817ac07e6cce43391"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/filter/fir_filter_test.cc:330\nExpected: { filter->connect(top_block); auto source = std::make_shared<FileSignalSource>(config2.get(), \"Test_Source\", 0, 1, queue.get()); source->connect(top_block); interleaved_byte_to_complex_byte_sptr ibyte_to_cbyte_ = make_interleaved_byte_to_complex_byte(); auto null_sink = gr::blocks::null_sink::make(item_size); top_block->connect(source->get_right_block(), 0, ibyte_to_cbyte_, 0); top_block->connect(ibyte_to_cbyte_, 0, filter->get_left_block(), 0); top_block->connect(filter->get_right_block(), 0, null_sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the top_block.\n","children":[{"name":"ConnectAndRunCbytes","uid":"bbf4b205c2a025d8","parentUid":"c9d8d8610efe59a4ba4c7cd8b39fff8e","status":"failed","time":{"start":1734688546312,"stop":1734688546312,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"c9d8d8610efe59a4ba4c7cd8b39fff8e"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/filter/notch_filter_lite_test.cc:196\nExpected: { filter->connect(top_block); auto source = std::make_shared<FileSignalSource>(config2.get(), \"Test_Source\", 0, 1, queue.get()); source->connect(top_block); auto null_sink = gr::blocks::null_sink::make(item_size); top_block->connect(source->get_right_block(), 0, filter->get_left_block(), 0); top_block->connect(filter->get_right_block(), 0, null_sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the top_block.\n","children":[{"name":"ConnectAndRunGrcomplex","uid":"b44ce36cd60a9802","parentUid":"f144d26b342ba723f2c615531d6a6bac","status":"failed","time":{"start":1734688546334,"stop":1734688546335,"duration":1},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"f144d26b342ba723f2c615531d6a6bac"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/filter/notch_filter_test.cc:194\nExpected: { filter->connect(top_block); auto source = std::make_shared<FileSignalSource>(config2.get(), \"Test_Source\", 0, 1, queue.get()); source->connect(top_block); auto null_sink = gr::blocks::null_sink::make(item_size); top_block->connect(source->get_right_block(), 0, filter->get_left_block(), 0); top_block->connect(filter->get_right_block(), 0, null_sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the top_block.\n","children":[{"name":"ConnectAndRunGrcomplex","uid":"eacbb4374647b126","parentUid":"fefd852258647ccb077918b34fc458f5","status":"failed","time":{"start":1734688546368,"stop":1734688546369,"duration":1},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"fefd852258647ccb077918b34fc458f5"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/filter/pulse_blanking_filter_test.cc:193\nExpected: { filter->connect(top_block); auto source = std::make_shared<FileSignalSource>(config2.get(), \"Test_Source\", 0, 1, queue.get()); source->connect(top_block); auto null_sink = gr::blocks::null_sink::make(item_size); top_block->connect(source->get_right_block(), 0, filter->get_left_block(), 0); top_block->connect(filter->get_right_block(), 0, null_sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the top_block.\n","children":[{"name":"ConnectAndRunGrcomplex","uid":"d764ce75bdede7ad","parentUid":"7bde46729d744637f13f9b12204f3d59","status":"failed","time":{"start":1734688546423,"stop":1734688546423,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"7bde46729d744637f13f9b12204f3d59"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/galileo_e1_dll_pll_veml_tracking_test.cc:172\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/GSoC_CTTC_capture_2012_07_26_4Msps_4ms.dat\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); gr::blocks::skiphead::sptr skip_head = gr::blocks::skiphead::make(sizeof(gr_complex), skiphead_sps); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), num_samples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, skip_head, 0); top_block->connect(skip_head, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","children":[{"name":"ValidationOfResults","uid":"dfeb4e049b0176ff","parentUid":"57042545d03745fd6a5de40be7fdc7ff","status":"failed","time":{"start":1734688546438,"stop":1734688546438,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":2,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"57042545d03745fd6a5de40be7fdc7ff"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/glonass_l1_ca_dll_pll_c_aid_tracking_test.cc:177\nExpected: { std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/NT1065_GLONASS_L1_20160831_fs6625e6_if0e3_4ms.bin\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), nsamples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); top_block->msg_connect(tracking->get_right_block(), pmt::mp(\"events\"), msg_rx, pmt::mp(\"events\")); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","children":[{"name":"ValidationOfResults","uid":"fccee4c076d4e762","parentUid":"f7d0f0f16c3b37ab2ba69ef122762d89","status":"failed","time":{"start":1734688548177,"stop":1734688548177,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"f7d0f0f16c3b37ab2ba69ef122762d89"},{"name":"/home/xavier/gnss-sdr/tests/unit-tests/signal-processing-blocks/tracking/glonass_l1_ca_dll_pll_tracking_test.cc:182\nExpected: { gr::analog::sig_source_c::sptr sin_source = gr::analog::sig_source_c::make(fs_in, gr::analog::GR_SIN_WAVE, 1000, 1, gr_complex(0)); std::string path = std::string(\"/home/xavier/gnss-sdr/build-debug/thirdparty/\"); std::string file = path + \"signal_samples/NT1065_GLONASS_L1_20160831_fs6625e6_if0e3_4ms.bin\"; const char* file_name = file.c_str(); gr::blocks::file_source::sptr file_source = gr::blocks::file_source::make(sizeof(gr_complex), file_name, false); auto valve = gnss_sdr_make_valve(sizeof(gr_complex), nsamples, queue.get()); gr::blocks::null_sink::sptr sink = gr::blocks::null_sink::make(sizeof(Gnss_Synchro)); top_block->connect(file_source, 0, valve, 0); top_block->connect(valve, 0, tracking->get_left_block(), 0); top_block->connect(tracking->get_right_block(), 0, sink, 0); top_block->msg_connect(tracking->get_right_block(), pmt::mp(\"events\"), msg_rx, pmt::mp(\"events\")); } doesn't throw an exception.\n  Actual: it throws std::runtime_error with description \"can't open file\".\nFailure connecting the blocks of tracking test.\n","children":[{"name":"ValidationOfResults","uid":"d9e22a3bf6de0887","parentUid":"15b87fdae35ad170efaf5e8508e30321","status":"failed","time":{"start":1734688548178,"stop":1734688548178,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"15b87fdae35ad170efaf5e8508e30321"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}],"name":"categories"}